haasSource1: &haasSource1
  name: haasSource1
  enabled: !!bool true
  scan_interval: !!int 1000
  connector: HaasSHDR
  rbe: !!bool true
  itemized_read: !!bool false
  address: 192.168.111.221
  port: !!int 9998
  timeout: !!int 1000
  heartbeat_interval: !!int 0
  retry_interval: !!int 10000
  init_script: |
    luanet.load_assembly("System")
    CLR = {
      env = luanet.import_type("System.Environment")
    };
  items:
    - name: CPU
      enabled: !!bool true
      address: CPU
      script: |
        local cpu = tonumber(result);
        if cpu > 0.5 then
          return 'HIGH';
        else
          return 'LOW';
        end
consoleSink1: &consoleSink1
  name: consoleSink1
  enabled: !!bool true
  scan_interval: !!int 1000
  connector: Console
httpServerSink1: &httpServerSink1
  name: httpServerSink1
  enabled: !!bool true
  scan_interval: !!int 1000
  connector: HTTPServer
  uri: http://*:8080/
scriptSource1: &scriptSource1
  name: scriptSource1
  enabled: !!bool true
  scan_interval: !!int 500
  connector: Script
  rbe: !!bool true
  init_script: |
    print('hello world from scriptSource1.init_script');
    luanet.load_assembly("System")
    CLR = {
      env = luanet.import_type("System.Environment")
    };
    -- https://github.com/rxi/json.lua
    json = require('json');
    -- https://github.com/Yonaba/Moses
    moses = require('moses');
    pcArray = {}
  items:
    - name: luaPackagePath
      enabled: !!bool true
      rbe: !!bool true
      script: |
        return package.path;
    - name: machineNameDiscrete
      enabled: !!bool true
      rbe: !!bool false
      script: |
        return CLR.env.MachineName;
    - name: machineNameByRefRbe
      enabled: !!bool true
      rbe: !!bool true
      script: |
        return cache('./machineNameDiscrete', nil);
    - name: dateTime
      enabled: !!bool true
      rbe: !!bool true
      script: |
        return os.date("%Y-%m-%d %H:%M:%S");
    - name: randomUserCacheOnly
      enabled: !!bool true
      rbe: !!bool true
      script: |
        set('random', math.random(500));
        return nil;
    - name: randomFromUserCache
      enabled: !!bool true
      rbe: !!bool true
      script: |
        return cache('random', -1);
    - name: mqttSensorReading
      enabled: !!bool true
      rbe: !!bool true
      script: |
        return cache('mqttSource1/ffe4Sensor', 0);
    - name: mqttSensorReadingMedian
      enabled: !!bool true
      rbe: !!bool true
      script: |
        table.insert(pcArray, cache('mqttSource1/ffe4Sensor', 0));
        pcArray = moses.last(pcArray, 100);
        return moses.median(pcArray);
    - name: AcmeCorp/ChicagoPlant/AssemblyArea/Line1/PartCount
      enabled: !!bool true
      rbe: !!bool false
      script: |
        return cache('mqttSource1/ffe4Sensor', 'Unavailable')
    - name: AcmeCorp/ChicagoPlant/AssemblyArea/Line1/ReportPeriod
      enabled: !!bool true
      rbe: !!bool false
      script: |
        return cache('mqttSource1/ffe4SensorAndDelta', {0, 0})[1]
    - name: AcmeCorp/ChicagoPlant/AssemblyArea/Line1/Execution
      enabled: !!bool true
      rbe: !!bool true
      script: |
        return cache('eipSource1/Execution', 'Unavailable')
    - name: OverallAvailabilityArrayNonRbe
      enabled: !!bool true
      rbe: !!bool false
      script: |
        local n = cache('eipSource1/$SYSTEM/IsConnected', nil);
        return n, n==true;
    - name: OverallAvailabilityArrayRbe
      enabled: !!bool true
      rbe: !!bool true
      script: |
        local n = cache('eipSource1/$SYSTEM/IsConnected', nil);
        return n, n==true;
    - name: OverallAvailabilityRbe
      enabled: !!bool true
      rbe: !!bool true
      script: |
        local n = cache('eipSource1/$SYSTEM/IsConnected', nil);
        return n==true and 'Available' or 'Unavailable';
      sink:
        mtconnect: Device[name=device1]/Availability[category=Event]
eipSource1: &eipSource1
  name: eipSource1
  enabled: !!bool true
  scan_interval: !!int 500
  connector: EthernetIP
  rbe: !!bool true
  type: !!int 5
  address: 192.168.111.20
  path: 1,0
  log: !!int 0
  timeout: !!int 1000
  bypass_ping: !!bool true
  init_script: ~
  enter_script: ~
  exit_script: ~
  deinit_script: ~
  items:
    - name: boolSetUserCacheOnly
      enabled: !!bool true
      type: bool
      address: B3:0/2
      script: |
        set('boolTag', result);
        return nil;
    - name: boolGetUserCache
      enabled: !!bool true
      script: |
        return cache('boolTag', false);
    - name: Execution
      enabled: !!bool true
      type: bool
      address: B3:0/3
      script: |
        local m = { [0]='Ready', [1]='Active' };
        return m[result and 1 or 0];
      sink:
        mtconnect: Device[name=device1]/Controller/Path/Execution[category=Event]
    - name: GoodPartCount
      enabled: !!bool true
      type: int
      address: N7:1
splunkEhSdkSink1: &splunkEhSdkSink1
  name: splunkEhSdkSink1
  enabled: !!bool true
  scan_interval: !!int 1000
  connector: SplunkEhSDK
  address: http://host.docker.internal
  port: !!int 50051
  numbers_to_metrics: !!bool true
app:
  ring_buffer: !!int 4096
  http_server_uri: http://*:9999/
  ws_server_uri: ws://0.0.0.0:9998/
sinks:
  - *consoleSink1
  - *httpServerSink1
  - *splunkEhSdkSink1
sources:
  - *eipSource1
  - *haasSource1
  - *scriptSource1